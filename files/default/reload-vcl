#!/bin/sh

# This is free software, distributed under the standard 2 clause BSD license,
# see the copyright file in the Varnish documentation directory

set -e
set -u

MAXIMUM=
WORK_DIR=
VCL_FILE=
WARMUP=
QUIET=
SCRIPT="$0"

usage() {
	test $# -eq 1 &&
	printf 'Error: %s.\n\n' "$1"

	cat <<-EOF
	Usage: $SCRIPT [-m <maximum>] [-n <workdir>] [-w <warmup>] [<file>]
	       $SCRIPT -h

	Reload and use a VCL on a running Varnish instance.

	Available options:
	-h           : show this help and exit
	-m <maximum> : maximum number of available reloads to leave behind
	-n <workdir> : for a different working directory for varnishd
	-w <warmup>  : the waiting period between load and use operations
	-q           : run with no output

	When <file> is empty or missing, the active VCL's file is used but
	will fail if the active VCL wasn't loaded from a file.

	Upon success, the name of the loaded VCL is constructed from the
	current date and time, for example:

	    $(vcl_reload_name)

	Afterwards available VCLs created by this script are discarded until
	<maximum> are left, unless it was empty or undefined.
	EOF
	exit $#
}

varnishadm() {
	if ! OUTPUT=$(command varnishadm -n "$WORK_DIR" -- "$@" 2>&1)
	then
		echo "Command: varnishadm -n '$WORK_DIR' -- $*"
		echo
		echo "$OUTPUT"
		echo
		exit 1
	fi >&2
	echo "$OUTPUT"
}

fail() {
	if [ -z "$QUIET" ]
	then
		echo "Error: $*" >&2
	fi
	exit 1
}

vcl_file() {
	VCL_SHOW="$(varnishadm vcl.show -v "$1")" ||
	fail "failed to get the VCL file name"

	echo "$VCL_SHOW" |
	awk '$1 == "//" && $2 == "VCL.SHOW" {print $NF; exit}'
}

vcl_active_name() {
	VCL_LIST="$(varnishadm vcl.list)" ||
	fail "failed to get the active VCL name"

	echo "$VCL_LIST" |
	awk '$1 == "active" {print $NF}'
}

vcl_active_file() {
	set -e
	VCL_NAME=$(vcl_active_name)
	vcl_file "$VCL_NAME"
}

vcl_reload_match() {
	awk '$1 == "available" && $NF ~ /^reload_[0-9]{8}_[0-9]{6}$/'" {$1}"
}

vcl_reload_count() {
	VCL_LIST="$(varnishadm vcl.list)" ||
	fail "failed to count available reload VCLs"

	echo "$VCL_LIST" |
	vcl_reload_match print |
	sed '=;d' |
	tail -1
}

vcl_reload_oldest() {
	VCL_LIST="$(varnishadm vcl.list)" ||
	fail "failed to get the oldest reload VCLs"

	echo "$VCL_LIST" |
	vcl_reload_match 'print $NF; exit'
}

vcl_reload_name() {
	printf "reload_%s" "$(date +%Y%m%d_%H%M%S)"
}

while getopts hm:n:w:q OPT
do
	case $OPT in
	h) usage ;;
	m) MAXIMUM=$OPTARG ;;
	n) WORK_DIR=$OPTARG ;;
	w) WARMUP=$OPTARG ;;
	q) QUIET="TRUE" ;;
	*) usage "wrong usage" >&2 ;;
	esac
done

shift $((OPTIND - 1))

test $# -gt 1 && usage "too many arguments" >&2
test $# -eq 1 && VCL_FILE="$1"

if [ -z "$VCL_FILE" ]
then
	VCL_FILE=$(vcl_active_file)

	case $VCL_FILE in
	/*) ;;
	*) fail "active VCL file not found (got $VCL_FILE)" ;;
	esac
fi

RELOAD_NAME=$(vcl_reload_name)

OUTPUT=$(varnishadm vcl.load "$RELOAD_NAME" "$VCL_FILE")
if [ -z "$QUIET" ]
then
	echo "$OUTPUT"
fi

test -n "$WARMUP" && sleep "$WARMUP"

OUTPUT=$(varnishadm vcl.use  "$RELOAD_NAME")
if [ -z "$QUIET" ]
then
    echo "$OUTPUT"
fi

safe_test() {
	test -z "$1" && return 1
	test "$@"
}

safe_test "$MAXIMUM" -ge 0 || exit 0

while true
do
	COUNT=$(vcl_reload_count)
	safe_test "$COUNT" -gt "$MAXIMUM" || exit 0
	OLDEST=$(vcl_reload_oldest)
	varnishadm vcl.discard "$OLDEST" >/dev/null
	if [ -z "$QUIET" ]
	then
		echo "VCL '$OLDEST' was discarded"
	fi
done
